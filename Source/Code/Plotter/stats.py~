#!/usr/bin/python

import numpy as np
from matplotlib import pylab as plt
import mpl_toolkits.mplot3d.axes3d as p3
import sys

def loadFile(filepath):

	fp = open(filepath);

	yaw = []
	pitch = []
	roll= []

	x = []
	y = []
	z = []

	for line in fp:
		vals = line.split('\t')
		yaw.append(float(vals[0]))
		pitch.append(float(vals[1]))
		roll.append(float(vals[2]))
		x.append(float(vals[3]))
		y.append(float(vals[4]))
		z.append(float(vals[5]))

	return {"yaw":yaw, "pitch":pitch, "roll":roll, "x":x, "y":y, "z":z}

def filter(src, label, lower=100, show=True):

	fourier = np.fft.fft(src)

	for i in range(0, lower):
		fourier[i] = 0
		fourier[-i] = 0

	inv = np.fft.ifft(fourier)[lower:-lower]
	
	if show and lower < 2:
		plt.plot(abs(fourier), 'bo')
		plt.legend([label,])
		plt.xlabel("Frequency component")
		plt.ylabel("Magnitude")
		plt.title("Fourier Transform: " + label)
		plt.show()

	return np.real(inv) 
	

if len(sys.argv) < 2:
	print "insufficient arguments..."
else:
	filepath = sys.argv[1]
	if len(sys.argv) == 2:
		bound = 1
	else:
		bound = int(sys.argv[2])
	state = loadFile(filepath)
	
		
	stdev = {}
	var = {}
	mean = {}

	for key in ["yaw", "pitch", "roll", "x", "y", "z"]:
		stdev[key] = []
		var[key] = []
		mean[key] = []
	
	for i in range(0,len(state["yaw"])/2-1):
		for key in ["yaw", "pitch", "roll", "x", "y", "z"]:
			temp = filter(state[key], key, i, True)
			stdev[key].append(np.std(temp))
			var[key].append(np.var(temp))
			mean[key].append(np.mean(temp))

	X = range(0,len(stdev["yaw"]))

	for key in ["yaw", "pitch", "roll", "x", "y", "z"]:

		plt.plot(X, stdev[key], 'bo')
		plt.plot(X, var[key], 'go')
		plt.plot(X, mean[key], 'ro')

		plt.legend(["stdev", "var", "mean"])

		plt.xlabel("Cutoff Index")
		plt.ylabel("Magnitude")

		plt.title(key)

		plt.show()

	

	



